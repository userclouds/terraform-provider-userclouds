openapi: 3.0.3
info:
  description: User Store OpenAPI Spec
  title: User Store
  version: 1.0.0
paths:
  /userstore/api/accessors:
    post:
      description: This endpoint executes a specified accessor (custom read API).
      parameters:
      - description: A cursor value after which the returned list will start
        in: query
        name: starting_after
        schema:
          description: A cursor value after which the returned list will start
          nullable: true
          type: string
      - description: A cursor value before which the returned list will end
        in: query
        name: ending_before
        schema:
          description: A cursor value before which the returned list will end
          nullable: true
          type: string
      - description: The maximum number of results to be returned per page
        in: query
        name: limit
        schema:
          description: The maximum number of results to be returned per page
          nullable: true
          type: string
      - description: A comma-delimited list of column names to sort the results by
          - the last column name must be 'id'
        in: query
        name: sort_key
        schema:
          description: A comma-delimited list of column names to sort the results
            by - the last column name must be 'id'
          nullable: true
          type: string
      - description: The order in which results should be sorted (ascending or descending)
        in: query
        name: sort_order
        schema:
          description: The order in which results should be sorted (ascending or descending)
          nullable: true
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreExecuteAccessorHandlerRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpExecuteAccessorResponse'
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      summary: Execute Accessor
      tags:
      - Accessors
  /userstore/api/consentedpurposes:
    post:
      description: This endpoint lists all consented purposes for a specified user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpGetConsentedPurposesForUserRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpGetConsentedPurposesForUserResponse'
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: List Purposes for User
      tags:
      - Purposes
  /userstore/api/mutators:
    post:
      description: This endpoint executes a specified mutator (custom write API).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpExecuteMutatorRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpExecuteMutatorResponse'
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          description: Conflict
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      summary: Execute Mutator
      tags:
      - Mutators
  /userstore/api/users:
    post:
      description: This endpoint creates a user and updates it with the specified
        mutator.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpCreateUserWithMutatorRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidUUID'
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create User With Mutator
      tags:
      - Users
  /userstore/api/users/{id}:
    delete:
      description: This endpoint deletes a user by ID
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete User
      tags:
      - Users
  /userstore/config/accessors:
    get:
      description: This endpoint lists all accessors in a tenant.
      parameters:
      - description: A cursor value after which the returned list will start
        in: query
        name: starting_after
        schema:
          description: A cursor value after which the returned list will start
          nullable: true
          type: string
      - description: A cursor value before which the returned list will end
        in: query
        name: ending_before
        schema:
          description: A cursor value before which the returned list will end
          nullable: true
          type: string
      - description: The maximum number of results to be returned per page
        in: query
        name: limit
        schema:
          description: The maximum number of results to be returned per page
          nullable: true
          type: string
      - description: A filter clause to use in the pagination query
        in: query
        name: filter
        schema:
          description: A filter clause to use in the pagination query
          nullable: true
          type: string
      - description: A comma-delimited list of field names to sort the returned results
          by - the last field name must be 'id'
        in: query
        name: sort_key
        schema:
          description: A comma-delimited list of field names to sort the returned
            results by - the last field name must be 'id'
          nullable: true
          type: string
      - description: The order in which results should be sorted (ascending or descending)
        in: query
        name: sort_order
        schema:
          description: The order in which results should be sorted (ascending or descending)
          nullable: true
          type: string
      - description: The version of the API to be called
        in: query
        name: version
        schema:
          description: The version of the API to be called
          nullable: true
          type: string
      - description: Optional - if versioned is true, endpoint will return all versions
          of each accessor in the response. Otherwise, only the latest version of
          each accessor will be returned.
        in: query
        name: versioned
        schema:
          description: Optional - if versioned is true, endpoint will return all versions
            of each accessor in the response. Otherwise, only the latest version of
            each accessor will be returned.
          nullable: true
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpListAccessorsResponse'
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: List Accessors
      tags:
      - Accessors
    post:
      description: This endpoint creates an accessor - a custom read API.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpCreateAccessorRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreAccessor'
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create Accessor
      tags:
      - Accessors
  /userstore/config/accessors/{id}:
    delete:
      description: This endpoint deletes an accessor by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete Accessor
      tags:
      - Accessors
    get:
      description: This endpoint gets an existing accessor's configuration by ID.
      parameters:
      - description: Optional - if not specified, the latest accessor will be returned
        in: query
        name: accessor_version
        schema:
          description: Optional - if not specified, the latest accessor will be returned
          nullable: true
          type: string
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreAccessor'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Accessor
      tags:
      - Accessors
    put:
      description: This endpoint updates a specified accessor.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateAccessorRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreAccessor'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Accessor
      tags:
      - Accessors
  /userstore/config/columns:
    get:
      description: This endpoint returns a paginated list of all columns in a tenant.
      parameters:
      - description: A cursor value after which the returned list will start
        in: query
        name: starting_after
        schema:
          description: A cursor value after which the returned list will start
          nullable: true
          type: string
      - description: A cursor value before which the returned list will end
        in: query
        name: ending_before
        schema:
          description: A cursor value before which the returned list will end
          nullable: true
          type: string
      - description: The maximum number of results to be returned per page
        in: query
        name: limit
        schema:
          description: The maximum number of results to be returned per page
          nullable: true
          type: string
      - description: A filter clause to use in the pagination query
        in: query
        name: filter
        schema:
          description: A filter clause to use in the pagination query
          nullable: true
          type: string
      - description: A comma-delimited list of field names to sort the returned results
          by - the last field name must be 'id'
        in: query
        name: sort_key
        schema:
          description: A comma-delimited list of field names to sort the returned
            results by - the last field name must be 'id'
          nullable: true
          type: string
      - description: The order in which results should be sorted (ascending or descending)
        in: query
        name: sort_order
        schema:
          description: The order in which results should be sorted (ascending or descending)
          nullable: true
          type: string
      - description: The version of the API to be called
        in: query
        name: version
        schema:
          description: The version of the API to be called
          nullable: true
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpListColumnsResponse'
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: List Columns
      tags:
      - Columns
    post:
      description: This endpoint creates a new column.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpCreateColumnRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreColumn'
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create Column
      tags:
      - Columns
  /userstore/config/columns/{id}:
    delete:
      description: This endpoint deletes a column by ID. Note that deleting the column
        doesn't result in data deletion - it just results in the data being immediately
        unavailable. To delete the data stored in the column, you need to trigger
        the garbage collection process on the column which will remove the data after
        a configurable retention period.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Delete Column
      tags:
      - Columns
    get:
      description: This endpoint gets a column's configuration by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreColumn'
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Column
      tags:
      - Columns
    put:
      description: This endpoint updates a specified column. Some column characteristics
        cannot be changed in an Update operation, once the column contains data. A
        column update may invalidate the accessors defined for it.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreColumn'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Column
      tags:
      - Columns
  /userstore/config/columns/{id}/liveretentiondurations:
    get:
      description: This endpoint gets the default Live column purpose ColumnRetentionDurations
        for a tenant column, one for each column purpose. For each retention duration,
        if the retention duration is a user-specified value, id will be non-nil, and
        use_default will be false.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationsResponse'
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Default Live ColumnRetentionDurations for Column
      tags:
      - ColumnRetentionDurations
    post:
      description: This endpoint updates all specified Live column purpose ColumnRetentionDurations
        for a tenant column. For each retention duration, if id is nil and use_default
        is false, the retention duration will be created; if id is non-nil and use_default
        is false, the associated retention duration will be updated; or if id is non-nil
        and use_default is true, the associated retention duration will be deleted.
        Each column purpose retention duration that has been deleted will fall back
        to the associated purpose retention duration.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationsRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationsResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Live ColumnRetentionDurations for Column
      tags:
      - ColumnRetentionDurations
  /userstore/config/columns/{id}/liveretentiondurations/{id2}:
    delete:
      description: This endpoint deletes a specific Live column purpose ColumnRetentionDuration
        for a tenant column. Once the column purpose retention duration has been deleted,
        it will fall back to the associated purpose retention duration.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete Live ColumnRetentionDuration for Column
      tags:
      - ColumnRetentionDurations
    get:
      description: This endpoint gets a specific Live column purpose ColumnRetentionDuration
        for a tenant column.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Live ColumnRetentionDuration for Column
      tags:
      - ColumnRetentionDurations
    put:
      description: This endpoint updates a specific Live column purpose ColumnRetentionDuration
        for a tenant column.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Live ColumnRetentionDuration for Column
      tags:
      - ColumnRetentionDurations
  /userstore/config/columns/{id}/softdeletedretentiondurations:
    get:
      description: This endpoint gets the default SoftDeleted column purpose ColumnRetentionDurations
        for a tenant column, one for each column purpose. SoftDeleted data is data
        that has been deleted but is retained for a specified purpose and duration
        after deletion. For each retention duration, if the retention duration is
        a user-specified value, id will be non-nil, and use_default will be false.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationsResponse'
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Default SoftDeleted ColumnRetentionDurations for Column
      tags:
      - ColumnRetentionDurations
    post:
      description: This endpoint updates all specified SoftDeleted column purpose
        ColumnRetentionDurations for a tenant column. SoftDeleted data is data that
        has been deleted but is retained for a specified purpose and duration after
        deletion. For each retention duration, if id is nil and use_default is false,
        the retention duration will be created; if id is non-nil and use_default is
        false, the associated retention duration will be updated; or if id is non-nil
        and use_default is true, the associated retention duration will be deleted.
        Each column purpose retention duration that has been deleted will fall back
        to the associated purpose retention duration.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationsRequestType2'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationsResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update SoftDeleted ColumnRetentionDurations for Column
      tags:
      - ColumnRetentionDurations
  /userstore/config/columns/{id}/softdeletedretentiondurations/{id2}:
    delete:
      description: This endpoint deletes a specific SoftDeleted column purpose ColumnRetentionDuration
        for a tenant column. SoftDeleted data is data that has been deleted but is
        retained for a specified purpose and duration after deletion. Once the column
        purpose retention duration has been deleted, it will fall back to the associated
        purpose retention duration.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete SoftDeleted ColumnRetentionDuration for Column
      tags:
      - ColumnRetentionDurations
    get:
      description: This endpoint gets a specific SoftDeleted column purpose ColumnRetentionDuration
        for a tenant column. SoftDeleted data is data that has been deleted but is
        retained for a specified purpose and duration after deletion.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get SoftDeleted ColumnRetentionDuration for Column
      tags:
      - ColumnRetentionDurations
    put:
      description: This endpoint updates a specific SoftDeleted column purpose ColumnRetentionDuration
        for a tenant column. SoftDeleted data is data that has been deleted but is
        retained for a specified purpose and duration after deletion.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationRequestType2'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update SoftDeleted ColumnRetentionDuration for Column
      tags:
      - ColumnRetentionDurations
  /userstore/config/datatypes:
    get:
      description: This endpoint returns a paginated list of all data types in a tenant.
      parameters:
      - description: A cursor value after which the returned list will start
        in: query
        name: starting_after
        schema:
          description: A cursor value after which the returned list will start
          nullable: true
          type: string
      - description: A cursor value before which the returned list will end
        in: query
        name: ending_before
        schema:
          description: A cursor value before which the returned list will end
          nullable: true
          type: string
      - description: The maximum number of results to be returned per page
        in: query
        name: limit
        schema:
          description: The maximum number of results to be returned per page
          nullable: true
          type: string
      - description: A filter clause to use in the pagination query
        in: query
        name: filter
        schema:
          description: A filter clause to use in the pagination query
          nullable: true
          type: string
      - description: A comma-delimited list of field names to sort the returned results
          by - the last field name must be 'id'
        in: query
        name: sort_key
        schema:
          description: A comma-delimited list of field names to sort the returned
            results by - the last field name must be 'id'
          nullable: true
          type: string
      - description: The order in which results should be sorted (ascending or descending)
        in: query
        name: sort_order
        schema:
          description: The order in which results should be sorted (ascending or descending)
          nullable: true
          type: string
      - description: The version of the API to be called
        in: query
        name: version
        schema:
          description: The version of the API to be called
          nullable: true
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpListDataTypesResponse'
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: List Data Types
      tags:
      - Data Types
    post:
      description: This endpoint creates a new data type.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpCreateDataTypeRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreColumnDataType'
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create Data Type
      tags:
      - Data Types
  /userstore/config/datatypes/{id}:
    delete:
      description: This endpoint deletes a data type by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Delete Data Type
      tags:
      - Data Types
    get:
      description: This endpoint gets a data type's configuration by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreColumnDataType'
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Data Type
      tags:
      - Data Types
    put:
      description: This endpoint updates a specified data type.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateDataTypeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreColumnDataType'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Data Type
      tags:
      - Data Types
  /userstore/config/liveretentiondurations:
    get:
      description: This endpoint gets the default Live ColumnRetentionDuration for
        a tenant. If the retention duration is a user-specified value, id will be
        non-nil, and use_default will be false.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "500":
          description: Internal Server Error
      summary: Get Default Live ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
    post:
      description: This endpoint creates a Live ColumnRetentionDuration for a tenant.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpUpdateColumnRetentionDurationRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create Live ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
  /userstore/config/liveretentiondurations/{id}:
    delete:
      description: This endpoint deletes a specific Live ColumnRetentionDuration for
        a tenant. Once the tenant default retention duration has been deleted, it
        will fall back to the system default to retain Live data indefinitely.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete Live ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
    get:
      description: This endpoint gets a specific Live ColumnRetentionDuration for
        a tenant.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Live ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
    put:
      description: This endpoint updates a specific Live ColumnRetentionDuration for
        a tenant.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationRequestType3'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Live ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
  /userstore/config/mutators:
    get:
      description: This endpoint lists all mutators in a tenant.
      parameters:
      - description: A cursor value after which the returned list will start
        in: query
        name: starting_after
        schema:
          description: A cursor value after which the returned list will start
          nullable: true
          type: string
      - description: A cursor value before which the returned list will end
        in: query
        name: ending_before
        schema:
          description: A cursor value before which the returned list will end
          nullable: true
          type: string
      - description: The maximum number of results to be returned per page
        in: query
        name: limit
        schema:
          description: The maximum number of results to be returned per page
          nullable: true
          type: string
      - description: A filter clause to use in the pagination query
        in: query
        name: filter
        schema:
          description: A filter clause to use in the pagination query
          nullable: true
          type: string
      - description: A comma-delimited list of field names to sort the returned results
          by - the last field name must be 'id'
        in: query
        name: sort_key
        schema:
          description: A comma-delimited list of field names to sort the returned
            results by - the last field name must be 'id'
          nullable: true
          type: string
      - description: The order in which results should be sorted (ascending or descending)
        in: query
        name: sort_order
        schema:
          description: The order in which results should be sorted (ascending or descending)
          nullable: true
          type: string
      - description: The version of the API to be called
        in: query
        name: version
        schema:
          description: The version of the API to be called
          nullable: true
          type: string
      - description: Optional - if versioned is true, endpoint will return all versions
          of each mutator in the response. Otherwise, only the latest version of each
          mutator will be returned.
        in: query
        name: versioned
        schema:
          description: Optional - if versioned is true, endpoint will return all versions
            of each mutator in the response. Otherwise, only the latest version of
            each mutator will be returned.
          nullable: true
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpListMutatorsResponse'
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: List Mutators
      tags:
      - Mutators
    post:
      description: This endpoint creates a mutator.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpCreateMutatorRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreMutator'
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create Mutator
      tags:
      - Mutators
  /userstore/config/mutators/{id}:
    delete:
      description: This endpoint deletes a mutator by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete Mutator
      tags:
      - Mutators
    get:
      description: This endpoint gets a mutator by ID.
      parameters:
      - description: Optional - if not specified, the latest mutator will be returned
        in: query
        name: mutator_version
        schema:
          description: Optional - if not specified, the latest mutator will be returned
          nullable: true
          type: string
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreMutator'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Mutator
      tags:
      - Mutators
    put:
      description: This endpoint updates a specified mutator.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateMutatorRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstoreMutator'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Mutator
      tags:
      - Mutators
  /userstore/config/purposes:
    get:
      description: This endpoint returns a paginated list of all purposes in a tenant.
      parameters:
      - description: A cursor value after which the returned list will start
        in: query
        name: starting_after
        schema:
          description: A cursor value after which the returned list will start
          nullable: true
          type: string
      - description: A cursor value before which the returned list will end
        in: query
        name: ending_before
        schema:
          description: A cursor value before which the returned list will end
          nullable: true
          type: string
      - description: The maximum number of results to be returned per page
        in: query
        name: limit
        schema:
          description: The maximum number of results to be returned per page
          nullable: true
          type: string
      - description: A filter clause to use in the pagination query
        in: query
        name: filter
        schema:
          description: A filter clause to use in the pagination query
          nullable: true
          type: string
      - description: A comma-delimited list of field names to sort the returned results
          by - the last field name must be 'id'
        in: query
        name: sort_key
        schema:
          description: A comma-delimited list of field names to sort the returned
            results by - the last field name must be 'id'
          nullable: true
          type: string
      - description: The order in which results should be sorted (ascending or descending)
        in: query
        name: sort_order
        schema:
          description: The order in which results should be sorted (ascending or descending)
          nullable: true
          type: string
      - description: The version of the API to be called
        in: query
        name: version
        schema:
          description: The version of the API to be called
          nullable: true
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpListPurposesResponse'
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: List Purposes
      tags:
      - Purposes
    post:
      description: This endpoint creates a purpose.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpCreatePurposeRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstorePurpose'
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create Purpose
      tags:
      - Purposes
  /userstore/config/purposes/{id}:
    delete:
      description: This endpoint deletes a purpose by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Delete Purpose
      tags:
      - Purposes
    get:
      description: This endpoint gets a purpose by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstorePurpose'
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Purpose
      tags:
      - Purposes
    put:
      description: This endpoint updates a specified purpose.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdatePurposeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserstorePurpose'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Purpose
      tags:
      - Purposes
  /userstore/config/purposes/{id}/liveretentiondurations:
    get:
      description: This endpoint gets the default Live ColumnRetentionDuration for
        a tenant purpose. If the retention duration is a user-specified value, id
        will be non-nil, and use_default will be false.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Default Live ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
    post:
      description: This endpoint creates a Live ColumnRetentionDuration for a tenant
        purpose.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationRequestType4'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: Created
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create Live ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
  /userstore/config/purposes/{id}/liveretentiondurations/{id2}:
    delete:
      description: This endpoint deletes a specific Live ColumnRetentionDuration for
        a tenant purpose. If the purpose default retention duration has been deleted,
        it will fall back to the tenant retention duration.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete Live ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
    get:
      description: This endpoint gets a specific Live ColumnRetentionDuration for
        a tenant purpose.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Live ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
    put:
      description: This endpoint updates a specific Live ColumnRetentionDuration for
        a tenant purpose.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationRequestType5'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update Live ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
  /userstore/config/purposes/{id}/softdeletedretentiondurations:
    get:
      description: This endpoint gets the default SoftDeleted ColumnRetentionDuration
        for a tenant purpose. SoftDeleted data is data that has been deleted but is
        retained for a specified purpose and duration after deletion. If the retention
        duration is a user-specified value, id will be non-nil, and use_default will
        be false.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get Default SoftDeleted ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
    post:
      description: This endpoint creates a SoftDeleted ColumnRetentionDuration for
        a tenant purpose. SoftDeleted data is data that has been deleted but is retained
        for a specified purpose and duration after deletion.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationRequestType6'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: Created
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create SoftDeleted ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
  /userstore/config/purposes/{id}/softdeletedretentiondurations/{id2}:
    delete:
      description: This endpoint deletes a specific SoftDeleted ColumnRetentionDuration
        for a tenant purpose. SoftDeleted data is data that has been deleted but is
        retained for a specified purpose and duration after deletion. Once the purpose
        default retention duration has been deleted, it will fall back to the tenant
        retention duration.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete SoftDeleted ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
    get:
      description: This endpoint gets a specific SoftDeleted ColumnRetentionDuration
        for a tenant purpose. SoftDeleted data is data that has been deleted but is
        retained for a specified purpose and duration after deletion.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get SoftDeleted ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
    put:
      description: This endpoint updates a specific SoftDeleted ColumnRetentionDuration
        for a tenant purpose. SoftDeleted data is data that has been deleted but is
        retained for a specified purpose and duration after deletion.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      - in: path
        name: id2
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationRequestType7'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update SoftDeleted ColumnRetentionDuration for Purpose
      tags:
      - ColumnRetentionDurations
  /userstore/config/searchindices:
    get:
      description: This endpoint returns a paginated list of all user search indices
        in a tenant.
      parameters:
      - description: A cursor value after which the returned list will start
        in: query
        name: starting_after
        schema:
          description: A cursor value after which the returned list will start
          nullable: true
          type: string
      - description: A cursor value before which the returned list will end
        in: query
        name: ending_before
        schema:
          description: A cursor value before which the returned list will end
          nullable: true
          type: string
      - description: The maximum number of results to be returned per page
        in: query
        name: limit
        schema:
          description: The maximum number of results to be returned per page
          nullable: true
          type: string
      - description: A filter clause to use in the pagination query
        in: query
        name: filter
        schema:
          description: A filter clause to use in the pagination query
          nullable: true
          type: string
      - description: A comma-delimited list of field names to sort the returned results
          by - the last field name must be 'id'
        in: query
        name: sort_key
        schema:
          description: A comma-delimited list of field names to sort the returned
            results by - the last field name must be 'id'
          nullable: true
          type: string
      - description: The order in which results should be sorted (ascending or descending)
        in: query
        name: sort_order
        schema:
          description: The order in which results should be sorted (ascending or descending)
          nullable: true
          type: string
      - description: The version of the API to be called
        in: query
        name: version
        schema:
          description: The version of the API to be called
          nullable: true
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpListUserSearchIndicesResponse'
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: List User Search Indexes
      tags:
      - User Search Indices
    post:
      description: This endpoint creates a new user search index.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpCreateUserSearchIndexRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchUserSearchIndex'
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create User Search Index
      tags:
      - User Search Indices
  /userstore/config/searchindices/{id}:
    delete:
      description: This endpoint deletes a user search index by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Delete User Search Index
      tags:
      - User Search Indices
    get:
      description: This endpoint gets a user search index's configuration by ID.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchUserSearchIndex'
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get User Search Index
      tags:
      - User Search Indices
    put:
      description: This endpoint updates a specified user search index.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateUserSearchIndexRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchUserSearchIndex'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update User Search Index
      tags:
      - User Search Indices
  /userstore/config/softdeletedretentiondurations:
    get:
      description: This endpoint gets the default SoftDeleted ColumnRetentionDuration
        for a tenant. SoftDeleted data is data that has been deleted but is retained
        for a specified purpose and duration after deletion. If the retention duration
        is a user-specified value, id will be non-nil, and use_default will be false.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "500":
          description: Internal Server Error
      summary: Get Default SoftDeleted ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
    post:
      description: This endpoint creates a SoftDeleted ColumnRetentionDuration for
        a tenant. SoftDeleted data is data that has been deleted but is retained for
        a specified purpose and duration after deletion.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpUpdateColumnRetentionDurationRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create SoftDeleted ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
  /userstore/config/softdeletedretentiondurations/{id}:
    delete:
      description: This endpoint deletes a specific SoftDeleted ColumnRetentionDuration
        for a tenant. SoftDeleted data is data that has been deleted but is retained
        for a specified purpose and duration after deletion. Once the tenant default
        retention duration has been deleted, it will fall back to the system default
        to not retain deleted data.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete SoftDeleted ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
    get:
      description: This endpoint gets a specific SoftDeleted ColumnRetentionDuration
        for a tenant. SoftDeleted data is data that has been deleted but is retained
        for a specified purpose and duration after deletion.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get SoftDeleted ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
    put:
      description: This endpoint updates a specific SoftDeleted ColumnRetentionDuration
        for a tenant. SoftDeleted data is data that has been deleted but is retained
        for a specified purpose and duration after deletion.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/UuidUUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserstoreUpdateColumnRetentionDurationRequestType8'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpColumnRetentionDurationResponse'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update SoftDeleted ColumnRetentionDuration for Tenant
      tags:
      - ColumnRetentionDurations
components:
  schemas:
    IdpColumnConsentedPurposes:
      properties:
        column:
          $ref: '#/components/schemas/UserstoreResourceID'
        consented_purposes:
          items:
            $ref: '#/components/schemas/UserstoreResourceID'
          nullable: true
          type: array
      type: object
    IdpColumnRetentionDuration:
      properties:
        column_id:
          $ref: '#/components/schemas/UuidUUID'
        default_duration:
          $ref: '#/components/schemas/IdpRetentionDuration'
        duration:
          $ref: '#/components/schemas/IdpRetentionDuration'
        duration_type:
          $ref: '#/components/schemas/UserstoreDataLifeCycleState'
        id:
          $ref: '#/components/schemas/UuidUUID'
        purpose_id:
          $ref: '#/components/schemas/UuidUUID'
        purpose_name:
          nullable: true
          type: string
        use_default:
          type: boolean
        version:
          type: integer
      type: object
    IdpColumnRetentionDurationResponse:
      properties:
        max_duration:
          $ref: '#/components/schemas/IdpRetentionDuration'
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    IdpColumnRetentionDurationsResponse:
      properties:
        max_duration:
          $ref: '#/components/schemas/IdpRetentionDuration'
        retention_durations:
          items:
            $ref: '#/components/schemas/IdpColumnRetentionDuration'
          nullable: true
          type: array
      type: object
    IdpCreateAccessorRequest:
      properties:
        accessor:
          $ref: '#/components/schemas/UserstoreAccessor'
      type: object
    IdpCreateColumnRequest:
      properties:
        column:
          $ref: '#/components/schemas/UserstoreColumn'
      type: object
    IdpCreateDataTypeRequest:
      properties:
        data_type:
          $ref: '#/components/schemas/UserstoreColumnDataType'
      type: object
    IdpCreateMutatorRequest:
      properties:
        mutator:
          $ref: '#/components/schemas/UserstoreMutator'
      type: object
    IdpCreatePurposeRequest:
      properties:
        purpose:
          $ref: '#/components/schemas/UserstorePurpose'
      type: object
    IdpCreateUserSearchIndexRequest:
      properties:
        index:
          $ref: '#/components/schemas/SearchUserSearchIndex'
      type: object
    IdpCreateUserWithMutatorRequest:
      properties:
        context:
          $ref: '#/components/schemas/PolicyClientContext'
        id:
          $ref: '#/components/schemas/UuidUUID'
        mutator_id:
          $ref: '#/components/schemas/UuidUUID'
        organization_id:
          $ref: '#/components/schemas/UuidUUID'
        region:
          type: string
        row_data:
          additionalProperties:
            $ref: '#/components/schemas/IdpValueAndPurposes'
          nullable: true
          type: object
      type: object
    IdpDurationUnit:
      enum:
      - day
      - hour
      - indefinite
      - month
      - week
      - year
      type: string
    IdpExecuteAccessorResponse:
      properties:
        data:
          items:
            type: string
          nullable: true
          type: array
        debug:
          additionalProperties: {}
          type: object
        has_next:
          type: boolean
        has_prev:
          type: boolean
        next:
          type: string
        prev:
          $ref: '#/components/schemas/PaginationCursor'
        truncated:
          description: Will be true if an incomplete set of results could be returned
            for the query
          type: boolean
      type: object
    IdpExecuteMutatorRequest:
      properties:
        context:
          $ref: '#/components/schemas/PolicyClientContext'
        mutator_id:
          $ref: '#/components/schemas/UuidUUID'
        region:
          type: string
        row_data:
          additionalProperties:
            $ref: '#/components/schemas/IdpValueAndPurposes'
          nullable: true
          type: object
        selector_values:
          $ref: '#/components/schemas/UserstoreUserSelectorValues'
      type: object
    IdpExecuteMutatorResponse:
      properties:
        user_ids:
          items:
            $ref: '#/components/schemas/UuidUUID'
          nullable: true
          type: array
      type: object
    IdpGetConsentedPurposesForUserRequest:
      properties:
        columns:
          items:
            $ref: '#/components/schemas/UserstoreResourceID'
          nullable: true
          type: array
        user_id:
          $ref: '#/components/schemas/UuidUUID'
      type: object
    IdpGetConsentedPurposesForUserResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/IdpColumnConsentedPurposes'
          nullable: true
          type: array
      type: object
    IdpListAccessorsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserstoreAccessor'
          nullable: true
          type: array
        has_next:
          type: boolean
        has_prev:
          type: boolean
        next:
          type: string
        prev:
          $ref: '#/components/schemas/PaginationCursor'
      type: object
    IdpListColumnsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserstoreColumn'
          nullable: true
          type: array
        has_next:
          type: boolean
        has_prev:
          type: boolean
        next:
          type: string
        prev:
          $ref: '#/components/schemas/PaginationCursor'
      type: object
    IdpListDataTypesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserstoreColumnDataType'
          nullable: true
          type: array
        has_next:
          type: boolean
        has_prev:
          type: boolean
        next:
          type: string
        prev:
          $ref: '#/components/schemas/PaginationCursor'
      type: object
    IdpListMutatorsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserstoreMutator'
          nullable: true
          type: array
        has_next:
          type: boolean
        has_prev:
          type: boolean
        next:
          type: string
        prev:
          $ref: '#/components/schemas/PaginationCursor'
      type: object
    IdpListPurposesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserstorePurpose'
          nullable: true
          type: array
        has_next:
          type: boolean
        has_prev:
          type: boolean
        next:
          type: string
        prev:
          $ref: '#/components/schemas/PaginationCursor'
      type: object
    IdpListUserSearchIndicesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/SearchUserSearchIndex'
          nullable: true
          type: array
        has_next:
          type: boolean
        has_prev:
          type: boolean
        next:
          type: string
        prev:
          $ref: '#/components/schemas/PaginationCursor'
      type: object
    IdpRetentionDuration:
      properties:
        duration:
          type: integer
        unit:
          $ref: '#/components/schemas/IdpDurationUnit'
      type: object
    IdpUpdateColumnRetentionDurationRequest:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    IdpValueAndPurposes:
      properties:
        purpose_additions:
          items:
            $ref: '#/components/schemas/UserstoreResourceID'
          nullable: true
          type: array
        purpose_deletions:
          items:
            $ref: '#/components/schemas/UserstoreResourceID'
          nullable: true
          type: array
        value: {}
        value_additions: {}
        value_deletions: {}
      type: object
    PaginationCursor: {}
    PolicyClientContext:
      additionalProperties: {}
      type: object
    SearchIndexSettings:
      properties:
        ngram:
          $ref: '#/components/schemas/SearchNgramIndexSettings'
      type: object
    SearchIndexType:
      enum:
      - deprecated
      - ngram
      type: string
    SearchNgramIndexSettings:
      properties:
        max_ngram:
          type: integer
        min_ngram:
          type: integer
      type: object
    SearchQueryType:
      enum:
      - term
      - wildcard
      type: string
    SearchUserSearchIndex:
      properties:
        accessors:
          items:
            $ref: '#/components/schemas/SearchUserSearchIndexAccessor'
          nullable: true
          type: array
        bootstrapped:
          format: date-time
          type: string
        columns:
          items:
            $ref: '#/components/schemas/UserstoreResourceID'
          nullable: true
          type: array
        data_life_cycle_state:
          $ref: '#/components/schemas/UserstoreDataLifeCycleState'
        description:
          type: string
        enabled:
          format: date-time
          type: string
        id:
          $ref: '#/components/schemas/UuidUUID'
        index_name_suffix:
          type: string
        last_regional_bootstrapped_value_ids:
          additionalProperties:
            $ref: '#/components/schemas/UuidUUID'
          nullable: true
          type: object
        name:
          type: string
        searchable:
          format: date-time
          type: string
        settings:
          $ref: '#/components/schemas/SearchIndexSettings'
        type:
          $ref: '#/components/schemas/SearchIndexType'
      type: object
    SearchUserSearchIndexAccessor:
      properties:
        accessor:
          $ref: '#/components/schemas/UserstoreResourceID'
        query_type:
          $ref: '#/components/schemas/SearchQueryType'
      type: object
    UserstoreAccessor:
      properties:
        access_policy:
          $ref: '#/components/schemas/UserstoreResourceID'
        are_column_access_policies_overridden:
          description: Whether to column access policies are overridden for this accessor.
          type: boolean
        columns:
          items:
            $ref: '#/components/schemas/UserstoreColumnOutputConfig'
          nullable: true
          type: array
        data_life_cycle_state:
          $ref: '#/components/schemas/UserstoreDataLifeCycleState'
        description:
          type: string
        id:
          $ref: '#/components/schemas/UuidUUID'
        is_audit_logged:
          description: Whether this accessor is audit logged each time it is executed.
          type: boolean
        is_autogenerated:
          description: Whether this accessor is autogenerated.
          type: boolean
        is_system:
          description: Whether this accessor is a system accessor. System accessors
            cannot be deleted or modified. This property cannot be changed.
          type: boolean
        name:
          type: string
        purposes:
          items:
            $ref: '#/components/schemas/UserstoreResourceID'
          nullable: true
          type: array
        selector_config:
          $ref: '#/components/schemas/UserstoreUserSelectorConfig'
        token_access_policy:
          $ref: '#/components/schemas/UserstoreResourceID'
        use_search_index:
          description: If true, the accessor will use a search index to look up the
            users that match the selector. This can only be true if the selector refers
            to a single column with a concrete data type of string and uses the LIKE
            or ILIKE operator, and the column has the SearchIndexed flag set.
          type: boolean
        version:
          type: integer
      required:
      - name
      - selector_config
      - purposes
      - columns
      - access_policy
      type: object
    UserstoreColumn:
      properties:
        access_policy:
          $ref: '#/components/schemas/UserstoreResourceID'
        constraints:
          $ref: '#/components/schemas/UserstoreColumnConstraints'
        data_type:
          $ref: '#/components/schemas/UserstoreResourceID'
        default_token_access_policy:
          $ref: '#/components/schemas/UserstoreResourceID'
        default_transformer:
          $ref: '#/components/schemas/UserstoreResourceID'
        default_value:
          type: string
        id:
          $ref: '#/components/schemas/UuidUUID'
        index_type:
          $ref: '#/components/schemas/UserstoreColumnIndexType'
        is_array:
          type: boolean
        is_system:
          description: Whether this column is a system column. System columns cannot
            be deleted or modified. This property cannot be changed.
          type: boolean
        name:
          type: string
        search_indexed:
          type: boolean
        table:
          type: string
        type:
          type: string
      required:
      - name
      - data_type
      - is_array
      - index_type
      type: object
    UserstoreColumnConstraints:
      properties:
        fields:
          description: The set of fields associated with a column of type composite.
            Fields cannot be specified if the column type is not composite.
          items:
            $ref: '#/components/schemas/UserstoreColumnField'
          nullable: true
          type: array
        immutable_required:
          description: Can be enabled when unique_id_required is enabled. If true,
            values for the associated column cannot be modified, but can be added
            or removed.
          type: boolean
        partial_updates:
          description: Can be enabled for array columns that have UniqueRequired or
            UniqueIDRequired enabled. When enabled, a mutation request will update
            the specified subset of values for the associated column.
          type: boolean
        unique_id_required:
          description: Can be enabled for column type composite or address. If true,
            each value for the associated column must have a unique string ID, which
            can either be provided or generated by backend.
          type: boolean
        unique_required:
          description: If true, each value for the associated column must be unique
            for the user. This is primarily useful for array columns.
          type: boolean
      type: object
    UserstoreColumnDataType:
      properties:
        composite_attributes:
          $ref: '#/components/schemas/UserstoreCompositeAttributes'
        description:
          type: string
        id:
          $ref: '#/components/schemas/UuidUUID'
        is_composite_field_type:
          description: Whether the data type can be used for a composite field.
          type: boolean
        is_native:
          description: Whether this is a native non-editable data type.
          type: boolean
        name:
          type: string
      required:
      - name
      - description
      type: object
    UserstoreColumnField:
      properties:
        camel_case_name:
          description: Read-only camel-case version of field name, with underscores
            stripped out. (ex. IDField1)
          type: string
        ignore_for_uniqueness:
          description: If true, field value will be ignored when comparing two composite
            value for a uniqueness check.
          type: boolean
        name:
          description: Each part of name must be capitalized or all-caps, separated
            by underscores. Names may contain alphanumeric characters, and the first
            part must start with a letter, while other parts may start with a number.
            (ex. ID_Field_1)
          type: string
        required:
          description: Whether a value must be specified for the field.
          type: boolean
        struct_name:
          description: Read-only snake-case version of field name, with all letters
            lowercase. (ex. id_field_1)
          type: string
        type:
          type: string
      required:
      - type
      - name
      type: object
    UserstoreColumnIndexType:
      enum:
      - indexed
      - none
      - unique
      type: string
    UserstoreColumnInputConfig:
      properties:
        column:
          $ref: '#/components/schemas/UserstoreResourceID'
        normalizer:
          $ref: '#/components/schemas/UserstoreResourceID'
        validator:
          $ref: '#/components/schemas/UserstoreResourceID'
      type: object
    UserstoreColumnOutputConfig:
      properties:
        column:
          $ref: '#/components/schemas/UserstoreResourceID'
        token_access_policy:
          $ref: '#/components/schemas/UserstoreResourceID'
        transformer:
          $ref: '#/components/schemas/UserstoreResourceID'
      type: object
    UserstoreCompositeAttributes:
      properties:
        fields:
          description: The set of fields associated with a composite data type.
          items:
            $ref: '#/components/schemas/UserstoreCompositeField'
          nullable: true
          type: array
        include_id:
          description: Whether the composite data type must include an id field.
          type: boolean
      type: object
    UserstoreCompositeField:
      properties:
        camel_case_name:
          description: Read-only camel-case version of field name, with underscores
            stripped out. (ex. IDField1)
          type: string
        data_type:
          $ref: '#/components/schemas/UserstoreResourceID'
        ignore_for_uniqueness:
          description: If true, field value will be ignored when comparing two composite
            values for a uniqueness check.
          type: boolean
        name:
          description: Each part of name must be capitalized or all-caps, separated
            by underscores. Names may contain alphanumeric characters, and the first
            part must start with a letter, while other parts may start with a number.
            (ex. ID_Field_1)
          type: string
        required:
          description: Whether a value must be specified for the field.
          type: boolean
        struct_name:
          description: Read-only snake-case version of field name, with all letters
            lowercase. (ex. id_field_1)
          type: string
      required:
      - data_type
      - name
      type: object
    UserstoreDataLifeCycleState:
      enum:
      - ""
      - live
      - postdelete
      - predelete
      - softdeleted
      type: string
    UserstoreExecuteAccessorHandlerRequest:
      properties:
        access_primary_db_only:
          type: boolean
        accessor_id:
          $ref: '#/components/schemas/UuidUUID'
        context:
          $ref: '#/components/schemas/PolicyClientContext'
        debug:
          type: boolean
        region:
          type: string
        selector_values:
          $ref: '#/components/schemas/UserstoreUserSelectorValues'
      type: object
    UserstoreMutator:
      properties:
        access_policy:
          $ref: '#/components/schemas/UserstoreResourceID'
        columns:
          items:
            $ref: '#/components/schemas/UserstoreColumnInputConfig'
          nullable: true
          type: array
        description:
          type: string
        id:
          $ref: '#/components/schemas/UuidUUID'
        is_system:
          description: Whether this mutator is a system mutator. System mutators cannot
            be deleted or modified. This property cannot be changed.
          type: boolean
        name:
          type: string
        selector_config:
          $ref: '#/components/schemas/UserstoreUserSelectorConfig'
        version:
          type: integer
      required:
      - name
      - selector_config
      - columns
      - access_policy
      type: object
    UserstorePurpose:
      properties:
        description:
          type: string
        id:
          $ref: '#/components/schemas/UuidUUID'
        is_system:
          description: Whether this purpose is a system purpose. System purposes cannot
            be deleted or modified. This property cannot be changed.
          type: boolean
        name:
          type: string
      required:
      - name
      type: object
    UserstoreResourceID:
      properties:
        id:
          $ref: '#/components/schemas/UuidUUID'
        name:
          type: string
      type: object
    UserstoreUpdateAccessorRequest:
      properties:
        accessor:
          $ref: '#/components/schemas/UserstoreAccessor'
      type: object
    UserstoreUpdateColumnRequest:
      properties:
        column:
          $ref: '#/components/schemas/UserstoreColumn'
      type: object
    UserstoreUpdateColumnRetentionDurationRequest:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    UserstoreUpdateColumnRetentionDurationRequestType2:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    UserstoreUpdateColumnRetentionDurationRequestType3:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    UserstoreUpdateColumnRetentionDurationRequestType4:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    UserstoreUpdateColumnRetentionDurationRequestType5:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    UserstoreUpdateColumnRetentionDurationRequestType6:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    UserstoreUpdateColumnRetentionDurationRequestType7:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    UserstoreUpdateColumnRetentionDurationRequestType8:
      properties:
        retention_duration:
          $ref: '#/components/schemas/IdpColumnRetentionDuration'
      type: object
    UserstoreUpdateColumnRetentionDurationsRequest:
      properties:
        retention_durations:
          items:
            $ref: '#/components/schemas/IdpColumnRetentionDuration'
          nullable: true
          type: array
      type: object
    UserstoreUpdateColumnRetentionDurationsRequestType2:
      properties:
        retention_durations:
          items:
            $ref: '#/components/schemas/IdpColumnRetentionDuration'
          nullable: true
          type: array
      type: object
    UserstoreUpdateDataTypeRequest:
      properties:
        data_type:
          $ref: '#/components/schemas/UserstoreColumnDataType'
      type: object
    UserstoreUpdateMutatorRequest:
      properties:
        mutator:
          $ref: '#/components/schemas/UserstoreMutator'
      type: object
    UserstoreUpdatePurposeRequest:
      properties:
        purpose:
          $ref: '#/components/schemas/UserstorePurpose'
      type: object
    UserstoreUpdateUserSearchIndexRequest:
      properties:
        index:
          $ref: '#/components/schemas/SearchUserSearchIndex'
      type: object
    UserstoreUserSelectorConfig:
      properties:
        where_clause:
          example: '{id} = ANY (?)'
          type: string
      type: object
    UserstoreUserSelectorValues:
      items: {}
      nullable: true
      type: array
    UuidUUID:
      example: 248df4b7-aa70-47b8-a036-33ac447e668d
      format: uuid
      type: string
servers:
- url: https://your-tenant-name.tenant.userclouds.com
x-readme:
  explorer-enabled: false
